// color
$grey: #ccc;
$blue: #99FCFF; // 顶部标题文字
$light_blue: #8B89C8;  // input框里文字
$text: #7674B3; //底部长篇文字
$blue_border: #3A3A71;
$blue_bg: #2B2C6D;
$light_blue_bg: #31B1DF;
$green: #25C0BB;
$submitted: #31B1DF;  // 文字
$success: #1BC2AA;
$fail: #BC2847;
// width
$breakpoints: (
  'xs': 'only screen and ( min-width: 320px)',
  'sm': 'only screen and ( min-width: 768px)',
  'md': 'only screen and ( min-width: 992px)',
  'lg': 'only screen and ( min-width: 1200px)',
) !default;
@mixin respond-to($breakpoint) {
  $query: map-get($breakpoints, $breakpoint);
  @if not $query {
    @error 'No value found for `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.';
  }
  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}

@mixin mobile {
  @media (max-width: 768px) {
    @content;
  } 
}
@mixin pc {
  @media (min-width: 768px) {
    @content;
  } 
}

// 块状排列
@mixin row($v:3,$gap:2%){
  display: flex;
  flex-wrap: wrap;
  .item{
    width: 100%/$v - ($gap * ($v - 1) / $v);
    &:not(:nth-child(#{$v}n)){
      margin-right: $gap;
    }
  }
}
@mixin column($n, $gap, $w) {
  column-count: $n;
  column-width: $w;
  column-gap: $gap;
}

// main_width
@mixin main_width($width:1170px, $top: 0) {
  width: $width;
  margin: $top auto 0;
}
@mixin main_page {
  @include main_width(70%);
  padding-top: 7%;
  @include mobile {
    @include main_width(86%);
    padding-top: 10%;
  }
}

@mixin fixed_foot {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

// pos_value
@mixin position($top:0, $right:0, $bottom:0, $left:0) {
  position: absolute;
  @if ($right != no) {
    right: #{$right}px;
  }
  @if ($bottom != no) {
    bottom: #{$bottom}px;
  }
  @if ($top != no) {
    top: #{$top}px;
  }
  @if ($left != no) {
    left: #{$left}px;
  }
}

// gradient
@mixin gradient($startColor: #00aeff, $endColor: #2e70e8, $dir: right, $hover: 0) {
  background: linear-gradient(to $dir, $startColor 20%, $endColor) no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startColor', endColorstr='$endColor',GradientType=1 );
  @if ($hover == 1) {
    &:hover{
      background: linear-gradient(to $dir, $endColor 20%, $startColor) no-repeat;
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$endColor', endColorstr='$startColor',GradientType=1 );
    }
  }
}

//文字省略号
@mixin ellipsis($width: 100%){
  width: $width;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

// checkbox
@mixin checkbox($w:14,$radius:50%){
  position: relative;
  color: #327fff;
  cursor: pointer;
  width: #{$w}px;
  height: #{$w}px;
  -webkit-appearance: none;
  background: #fff;
  border-radius: $radius;
  &:before{
    content: '';
    @include position;
    line-height: #{$w}px;
  }
  &:checked:before{
    content: '\2714';
    font-size: 18px;
  }
}

// 进度条
@mixin progress($height: 5, $noColor: #ccc, $color: #ffb386) {
  position: relative;
  overflow:hidden;
  border-radius:#{$height}px;
  height:#{$height}px;
  background: $noColor;
  .box{
    @include position(0, no, 0, 0);
    background: $color;
  }
}

// shape
@mixin geometryShape ($border-color, $border-width, $width: 0, $height: 0) {
  width:#{$width}px;
  height:#{$width}px;
  border-color: $border-color;
  border-width: $border-width;
  border-style: solid;
}

// geometry
@mixin geometry ($color, $h1, $h2, $h3, $w) {
  .item1 {
    @include geometryShape(rgba(0,0,0,0) rgba(0,0,0,0) $color rgba(0,0,0,0), 30px 0 #{$h1}px #{$w}px)
  }
  .item2 {
    width: #{$w}px;
    height: #{$h2}px;
    background: $color;
  }
  @if ($h3 != 0) {
    .item3 {
      @include geometryShape($color rgba(0,0,0,0) rgba(0,0,0,0) rgba(0,0,0,0), #{$h3}px #{$w}px 30px 0)
    }
  }
}

// fit_img
@mixin fit_img($w, $h){
  width: #{$w}px;
  height: #{$h}px;
  img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
}
// 箭头
@mixin arrow($type:right,$color:#dbdee5,$value:2) {
  border: #{$value}px solid $color;
  border-top: none;
  border-right: none;
  @if $type == 'left'{
    transform: rotate(45deg);
  } @else if $type == 'right'{
    transform: rotate(-135deg);
  } @else if $type == 'up'{
    transform: rotate(135deg);
  } @else if $type == 'down'{
    transform: rotate(-45deg);
  }
}
// label
@mixin label($bg: $blue, $radius: 10, $text: #fff){
  border-radius: #{$radius}px;
  background: $bg;
  color: $text;
}

// block
@mixin block($value:20,$radius:0) {
  display: inline-block;
  width: #{$value}px;
  height: #{$value}px;
  line-height: #{$value}px;
  border-radius: $radius
}
// icon_close
@mixin close{
  @include position(-7, -9, no, no);
  z-index: 10;
  @include block(20,50%);
  background: #fff;
  cursor: pointer;
  &:before,&:after{
    @include position(9, no, no, 2);
    display: inline-block;
    content:'';
    width:15px;
    height:1.5px;
    background:$light_blue_bg;
  }
  &:before{
    transform:rotate(45deg)
  }
  &:after{
    transform:rotate(-45deg)
  }
}
